{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boban\\\\Desktop\\\\projects\\\\projects\\\\src\\\\context\\\\RestaurantContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RestaurantContext = /*#__PURE__*/createContext({\n  restaurants: [],\n  handleReview: () => {},\n  calculateAverageRating: () => 0,\n  handleFilter: () => {},\n  filtered: [],\n  handleFavRestaurant: () => {},\n  favRestaurants: []\n});\nexport const RestaurantContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [favRestaurants, setFavRestaurants] = useState(() => {\n    const storedRes = localStorage.getItem(\"favRestaurants\");\n    return storedRes ? JSON.parse(storedRes) : [];\n  });\n  useEffect(() => {\n    fetch(`http://localhost:5001/restaurants`).then(res => res.json()).then(response => {\n      setData(response);\n    });\n  }, []);\n\n  const handleReview = async (id, newReview) => {\n    try {\n      const updatedData = data.map(restaurant => {\n        if (restaurant.id === id) {\n          const updatedReviewsList = [...restaurant.reviewsList, {\n            id: Date.now(),\n            author: newReview.author,\n            comment: newReview.comment,\n            stars: newReview.stars\n          }];\n          const updatedReviews = updatedReviewsList.length;\n          const averageRating = calculateAverageRating(updatedReviewsList);\n          return { ...restaurant,\n            reviews: updatedReviews,\n            reviewsList: updatedReviewsList,\n            rating: averageRating\n          };\n        }\n\n        return restaurant;\n      });\n      const updatedRestaurant = updatedData.find(restaurant => restaurant.id === id);\n      setData(updatedData);\n\n      if (updatedRestaurant) {\n        await fetch(`http://localhost:5001/restaurants/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(updatedRestaurant)\n        });\n      }\n    } catch (error) {\n      console.error(\"Error updating restaurant:\", error);\n    }\n  };\n\n  const calculateAverageRating = reviewList => {\n    const totalStars = reviewList.reduce((acc, review) => acc + review.stars, 0);\n    const averageRating = totalStars / reviewList.length;\n    return parseInt(averageRating.toFixed(1));\n  };\n\n  const handleFilter = query => {\n    const filteredByType = data.filter(rest => rest.restauranttype === query);\n    setFiltered(filteredByType);\n  };\n\n  const handleFavRestaurant = id => {\n    const newRestaurant = data.find(rest => rest.id === id);\n\n    if (newRestaurant) {\n      const favRest = favRestaurants.some(rest => rest.id === id);\n\n      if (favRest) {\n        setFavRestaurants(prevState => prevState.filter(rest => rest.id !== id));\n      } else {\n        setFavRestaurants(prevState => [...prevState, newRestaurant]);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(RestaurantContext.Provider, {\n    value: {\n      restaurants: data,\n      handleReview,\n      calculateAverageRating,\n      handleFilter,\n      filtered,\n      handleFavRestaurant,\n      favRestaurants\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RestaurantContextProvider, \"n3QxRnA4pkm9lpM3x1v2gyq3IwU=\");\n\n_c = RestaurantContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","RestaurantContext","restaurants","handleReview","calculateAverageRating","handleFilter","filtered","handleFavRestaurant","favRestaurants","RestaurantContextProvider","children","data","setData","setFiltered","setFavRestaurants","storedRes","localStorage","getItem","JSON","parse","fetch","then","res","json","response","id","newReview","updatedData","map","restaurant","updatedReviewsList","reviewsList","Date","now","author","comment","stars","updatedReviews","length","averageRating","reviews","rating","updatedRestaurant","find","method","headers","body","stringify","error","console","reviewList","totalStars","reduce","acc","review","parseInt","toFixed","query","filteredByType","filter","rest","restauranttype","newRestaurant","favRest","some","prevState"],"sources":["C:/Users/boban/Desktop/projects/projects/src/context/RestaurantContext.tsx"],"sourcesContent":["import React, { ReactNode, createContext, useEffect, useState } from \"react\";\r\nimport { RestaurantType, ReviewType } from \"../interfaces/Types\";\r\n\r\nexport interface RestaurantContext {\r\n  restaurants: RestaurantType[];\r\n  handleReview: (id: string, newReview: ReviewType) => void;\r\n  calculateAverageRating: (reviewList: ReviewType[]) => number | string;\r\n  handleFilter: (query: string) => void;\r\n  filtered: RestaurantType[];\r\n  handleFavRestaurant: (id: string) => void;\r\n  favRestaurants: RestaurantType[];\r\n}\r\n\r\nexport const RestaurantContext = createContext<RestaurantContext>({\r\n  restaurants: [],\r\n  handleReview: () => {},\r\n  calculateAverageRating: () => 0,\r\n  handleFilter: () => {},\r\n  filtered: [],\r\n  handleFavRestaurant: () => {},\r\n  favRestaurants: [],\r\n});\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport const RestaurantContextProvider = ({ children }: Props) => {\r\n  const [data, setData] = useState<RestaurantType[]>([]);\r\n  const [filtered, setFiltered] = useState<RestaurantType[]>([]);\r\n  const [favRestaurants, setFavRestaurants] = useState<RestaurantType[]>(() => {\r\n    const storedRes = localStorage.getItem(\"favRestaurants\");\r\n    return storedRes ? JSON.parse(storedRes) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:5001/restaurants`)\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        setData(response);\r\n      });\r\n  }, []);\r\n\r\n  const handleReview = async (id: string, newReview: ReviewType) => {\r\n    try {\r\n      const updatedData = data.map((restaurant) => {\r\n        if (restaurant.id === id) {\r\n          const updatedReviewsList = [\r\n            ...restaurant.reviewsList,\r\n            {\r\n              id: Date.now(),\r\n              author: newReview.author,\r\n              comment: newReview.comment,\r\n              stars: newReview.stars,\r\n            },\r\n          ];\r\n\r\n          const updatedReviews = updatedReviewsList.length;\r\n          const averageRating = calculateAverageRating(updatedReviewsList);\r\n\r\n          return {\r\n            ...restaurant,\r\n            reviews: updatedReviews,\r\n            reviewsList: updatedReviewsList,\r\n            rating: averageRating,\r\n          };\r\n        }\r\n        return restaurant;\r\n      });\r\n\r\n      const updatedRestaurant = updatedData.find(\r\n        (restaurant) => restaurant.id === id\r\n      );\r\n\r\n      setData(updatedData);\r\n\r\n      if (updatedRestaurant) {\r\n        await fetch(`http://localhost:5001/restaurants/${id}`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(updatedRestaurant),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating restaurant:\", error);\r\n    }\r\n  };\r\n\r\n  const calculateAverageRating = (\r\n    reviewList: ReviewType[]\r\n  ): number | string => {\r\n    const totalStars = reviewList.reduce(\r\n      (acc, review) => acc + review.stars,\r\n      0\r\n    );\r\n    const averageRating = totalStars / reviewList.length;\r\n    return parseInt(averageRating.toFixed(1));\r\n  };\r\n\r\n  const handleFilter = (query: string) => {\r\n    const filteredByType = data.filter((rest) => rest.restauranttype === query);\r\n    setFiltered(filteredByType);\r\n  };\r\n\r\n  const handleFavRestaurant = (id: string) => {\r\n    const newRestaurant = data.find((rest) => rest.id === id);\r\n    if (newRestaurant) {\r\n      const favRest = favRestaurants.some((rest) => rest.id === id);\r\n\r\n      if (favRest) {\r\n        setFavRestaurants((prevState) =>\r\n          prevState.filter((rest) => rest.id !== id)\r\n        );\r\n      } else {\r\n        setFavRestaurants((prevState) => [...prevState, newRestaurant]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RestaurantContext.Provider\r\n      value={{\r\n        restaurants: data,\r\n        handleReview,\r\n        calculateAverageRating,\r\n        handleFilter,\r\n        filtered,\r\n        handleFavRestaurant,\r\n        favRestaurants,\r\n      }}\r\n    >\r\n      {children}\r\n    </RestaurantContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}